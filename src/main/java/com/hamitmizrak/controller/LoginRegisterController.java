package com.hamitmizrak.controller;

import com.hamitmizrak.dao.RegisterDao;
import com.hamitmizrak.dao.StudentDao;
import com.hamitmizrak.dao.TeacherDao;
import com.hamitmizrak.dto.*;
import com.hamitmizrak.utils.SpecialColor;

import java.time.LocalDate;
import java.time.format.DateTimeParseException;
import java.util.HashMap;
import java.util.Map;
import java.util.Optional;
import java.util.Scanner;
import java.util.logging.Logger;

public class LoginRegisterController {

    // Loglama
    private static final Logger logger = Logger.getLogger(LoginRegisterController.class.getName());

    // Field
    private final RegisterDao registerDao;
    private final StudentDao studentDao;
    private final TeacherDao teacherDao;
    private final StudentController studentController;
    private final TeacherController teacherController;
    private final Scanner scanner = new Scanner(System.in);

    public LoginRegisterController() {
        registerDao = new RegisterDao();
        studentDao = new StudentDao();
        teacherDao = new TeacherDao();
        studentController = new StudentController();
        teacherController = new TeacherController();
    }

    public void isUserRole(RegisterDto registerDto) {
        switch (registerDto.getRole()) {
            case "STUDENT" -> studentController.choose();
            case "TEACHER" -> teacherController.choose();
            default -> System.out.println("Yetkilendirilme yapÄ±lmamÄ±ÅŸtÄ±r. YÃ¶netici ile iletiÅŸime geÃ§in.");
        }
    }

    public void login() {
        int maxAttempts = 3;
        Map<String, Integer> loginAttempts = new HashMap<>();

        while (true) {
            System.out.println("\n==== GÄ°RÄ°Åž EKRANI ====");
            System.out.print("Email: ");
            String email = scanner.nextLine().trim();
            System.out.print("Åžifre: ");
            String password = scanner.nextLine().trim();

            // Email var mÄ± yok mu ?
            Optional<RegisterDto> findIsEmail = registerDao.findByEmail(email);
            if (findIsEmail.isPresent()) {
                // KullanÄ±cÄ± bilgilerini al
                RegisterDto user = findIsEmail.get();
                System.out.println("Locked: "+user.isLocked());

                // KullanÄ±cÄ± kilitli mi ?
                if (user.isLocked()) {
                    System.out.println("HesabÄ±nÄ±z kilitli.");
                    return;
                }

                // ðŸ“Œ Åžifreyi dÃ¼z metin olarak almak iÃ§in yeni metod kullanÄ±ldÄ±
                String plainPassword = user.getDecryptedPassword();
                RegisterDto registerDto= new RegisterDto();
                System.out.println("Email: "+user.getEmailAddress().equals(email));
                System.out.println("ÅŸifre: "+plainPassword.equals(password));
                //System.out.println("ÅŸifre doÄŸrulama: "+plainPassword.equals( registerDto.encryptPassword(password) ));

                // Email ve Åžifre doÄŸrulama
                if (user.getEmailAddress().equals(email) && plainPassword.equals( registerDto.encryptPassword(password) )) {
                    System.out.println(SpecialColor.GREEN + "BaÅŸarÄ±yla giriÅŸ yaptÄ±nÄ±z " + SpecialColor.RESET +
                            SpecialColor.BLUE + "HoÅŸgeldiniz " + email + SpecialColor.RESET);
                    isUserRole(user);
                    break;
                } else {
                    // YanlÄ±ÅŸ giriÅŸ sayÄ±sÄ±nÄ± artÄ±r
                    loginAttempts.put(email, loginAttempts.getOrDefault(email, 0) + 1);
                    int attempts = loginAttempts.get(email);

                    // Kalan Hak
                    int remaining = maxAttempts - attempts;
                    System.out.println("Hata: KullanÄ±cÄ± adÄ±nÄ±z veya ÅŸifreniz yanlÄ±ÅŸtÄ±r" +
                            SpecialColor.BLUE + " Kalan hakkÄ±nÄ±z: " + remaining + SpecialColor.RESET);

                    // 3 kez yanlÄ±ÅŸ girerse kullanÄ±cÄ± kilitlensin
                    if (attempts >= maxAttempts) {
                        user.setLocked(true);
                        registerDao.update(user.getId(), user); // GÃ¼ncellenmiÅŸ kullanÄ±cÄ±yÄ± kaydet
                        System.out.println("Hata: KullanÄ±cÄ± 3 kez hatalÄ± giriÅŸ yaptÄ±ÄŸÄ± iÃ§in sistem tarafÄ±ndan kilitlenmiÅŸtir.");
                        return;
                    }
                }
            } else {
                System.out.println("KullanÄ±cÄ± bulunamadÄ±! Ã–nce kayÄ±t olmalÄ±sÄ±nÄ±z.");
                register();
            }
        }
    }


    /// REGISTER
    private void register() {
        System.out.println("\n" + SpecialColor.BLUE + " Yeni KullanÄ±cÄ± KaydÄ±" + SpecialColor.RESET);
        String name, surname, email, nickname, password;
        LocalDate birthDate;
        ERole role;

        // Name
        System.out.print("Name adresiniz: ");
        name = scanner.nextLine().trim();

        // Surname
        System.out.print("Surname adresiniz: ");
        surname = scanner.nextLine().trim();

        // Nickname
        System.out.print("Nickname giriniz: ");
        nickname = scanner.nextLine().trim();

        // Email
        System.out.print("Email adresiniz: ");
        email = scanner.nextLine().trim();

        // Åžifre
        System.out.print("Åžifrenizi giriniz: ");
        password = scanner.nextLine().trim();

        // Role
        System.out.print("Role giriniz (STUDENT, TEACHER): ");
        role = ERole.valueOf(scanner.nextLine().trim().toUpperCase());

        // Birthday
        System.out.print("DoÄŸum Tarihi (YYYY-MM-DD) : ");
        birthDate = LocalDate.parse(scanner.nextLine().trim());

        // Auto Increment ID
        int generatedId = registerDao.generateNewId();
        RegisterDto register = new RegisterDto();
        /*
        UNDERGRADUATE, // Lisans
        GRADUATE,      // YÃ¼ksek Lisans
        PHD,           // Doktora
        OTHER          // DiÄŸerleri
         */

        // EÄŸer Rol (Ã–ÄŸrenciyse)
        if (role == ERole.STUDENT) {
            System.out.print("Ã–ÄŸrenci TÃ¼rÃ¼nÃ¼z (UNDERGRADUATE,GRADUATE,PHD,OTHER): ");
            EStudentType studentType = EStudentType.valueOf(scanner.nextLine().trim().toUpperCase());
            // Ã–ÄŸrenci OluÅŸtur
            StudentDto student = new StudentDto(generatedId, name, surname, birthDate, studentType, role);

            // KayÄ±t OluÅŸtur
            register = new RegisterDto(generatedId, nickname, email, password, "STUDENT".toUpperCase(), false, student, null);
            studentDao.create(student);
        } else if (role == ERole.TEACHER) {
            /*
            MATHEMATICS,
            CHEMISTRY,
            BIOLOGY,
            HISTORY,
            COMPUTER_SCIENCE,
            OTHER
             */
            System.out.print("UzmanlÄ±k AlanÄ±nÄ±z (MATHEMATICS,CHEMISTRY,BIOLOGY,HISTORY,COMPUTER_SCIENCE,OTHER): ");
            ETeacherSubject eTeacherSubject = ETeacherSubject.valueOf(scanner.nextLine().trim().toUpperCase());
            System.out.print("Deneyim yÄ±lÄ±nÄ±zÄ± giriniz: ");
            int yearsOfExperience = scanner.nextInt();

            System.out.print("MaaÅŸ bilginiz giriniz: ");
            double salary = scanner.nextDouble();
            scanner.nextLine(); // maaÅŸ sonra tekrara geldiÄŸinde double sonras String scanner hata almamak iÃ§in

            // Ã–ÄŸretmen OluÅŸtur
            TeacherDto teacher = new TeacherDto(generatedId, name, surname, birthDate, eTeacherSubject, yearsOfExperience, false, salary);

            // KayÄ±t oluÅŸtur     StudentDto studentDto, TeacherDto teacherDto
            register = new RegisterDto(generatedId, nickname, email, password, "TEACHER".toUpperCase(), false, null, teacher);
            teacherDao.create(teacher);
        }

        registerDao.create(register);
        System.out.println("KayÄ±t Ä°ÅŸlemi baÅŸarÄ±lÄ± GiriÅŸ yapabilirsiniz.");
    }

}
